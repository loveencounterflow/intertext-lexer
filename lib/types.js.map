{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAJ5B;;;;;;;;;;;EAcA,CAAA,CAAE,KAAF,CAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAA5B;;EACA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,UAAA,GAA4B;;EAC5B,MAAA,GAA4B,MAAA,CAAO,QAAP,EArB5B;;;;;EA0BA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACjB,QAAA;IAAE,IAAqB,kBAArB;AAAA,aAAO,WAAP;KAAF;;IAEE,UAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,UAA5B,EAHF;;;IAME,OAAO,CAAC,QAAR,CAAoB,eAApB;IACA,OAAO,CAAC,OAAR,CAAoB,eAApB;IACA,OAAO,CAAC,WAAR,CAAoB,eAApB;IACA,OAAO,CAAC,kBAAR,CACE;MAAA,MAAA,EACE;QAAA,IAAA,EAAgB,UAAhB;QACA,GAAA,EAAgB,SADhB;QAEA,OAAA,EAAgB;MAFhB,CADF;MAIA,OAAA,EACE;QAAA,IAAA,EAAgB,OAAhB;QACA,GAAA,EAAgB,IADhB;QAEA,OAAA,EAAgB;MAFhB;IALF,CADF,EATF;;AAmBE,WAAO;EApBQ,EA1BjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6JA,MAAM,CAAC,OAAP,GAAiB,CAAE,MAAF,EAAU,cAAV;AA7JjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'INTERTEXT-LEXER/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nmisfit                    = Symbol 'misfit'\n# PATH                      = require 'node:path'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  # declare.ilx_pattern     override: true, isa: ( x ) -> x instanceof Document\n  declare.ilx_mode    'nonempty.text'\n  declare.ilx_tid     'nonempty.text'\n  declare.ilx_pattern 'text.or.regex'\n  declare.ilx_add_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      tid:            'ilx_tid'\n      pattern:        'ilx_pattern'\n    default:\n      mode:           'plain'\n      tid:            null\n      pattern:        null\n  #.........................................................................................................\n  return base_types\n\n# #-----------------------------------------------------------------------------------------------------------\n# get_server_types = ->\n#   return server_types if server_types?\n#   #.........................................................................................................\n#   server_types                = new Intertype get_base_types()\n#   { declare }                 = server_types\n#   #.........................................................................................................\n#   declare.datamill_host       'nonempty.text'\n#   declare.datamill_port       ( x ) ->\n#     return false unless @isa.integer x\n#     return false unless 1024 <= x <= 65535\n#     return true\n#   #.........................................................................................................\n#   declare.datamill_server_cfg\n#     fields:\n#       host:               'datamill_host'\n#       port:               'datamill_port'\n#       doc:                'datamill_document'\n#     default:\n#       host:               'localhost'\n#       port:               3456\n#       paths:\n#         public:     PATH.resolve __dirname, '../public'\n#         favicon:    PATH.resolve __dirname, '../public/favicon.png'\n#         src:        PATH.resolve __dirname, '../src'\n#       file_server:\n#         # Enable or disable accepting ranged requests. Disabling this will not send Accept-Ranges and ignore the\n#         # contents of the Range request header. defaults to true.\n#         acceptRanges:     true\n#         # Set Cache-Control response header, defaults to undefined, see docs: Cache-Control in MDN.\n#         cacheControl:     undefined\n#         # Enable or disable etag generation, defaults to true.\n#         etag:             true\n#         # Enable or disable Last-Modified header, defaults to true. Uses the file system's last modified value.\n#         # defaults to true.\n#         lastModified:     true\n#         # Set ignore rules. defaults to undefined. ( path ) => boolean\n#         ignore:           undefined\n#         # If true, serves after await next(), allowing any downstream middleware to respond first. defaults to false.\n#         defer:            false\n#   #...........................................................................................................\n#   return server_types\n\n# #-----------------------------------------------------------------------------------------------------------\n# get_document_types = ->\n#   return document_types if document_types?\n#   #.........................................................................................................\n#   document_types                = new Intertype get_base_types()\n#   { declare }                   = document_types\n#   #.........................................................................................................\n#   declare.doc_fad_id    'nonempty.text'     ### TAINT should check with DB whether known ###\n#   declare.doc_src_path 'nonempty.text'     ### TAINT should be more precise ###\n#   declare.doc_src_id    'nonempty.text'     ### TAINT should be more precise ###\n#   declare.doc_region_id 'nonempty.text'     ### TAINT should be more precise ###\n#   declare.doc_home      'nonempty.text'     ### TAINT should be more precise ###\n#   declare.doc_src_hash ( x ) -> ( @isa.text x ) and ( /^[0-9a-f]{17}$/.test x )\n#   #.........................................................................................................\n#   declare.doc_document_cfg\n#     fields:\n#       db:                 'dbay'\n#       home:               'doc_home'\n#       _loc_marker_re:     'regex'\n#     default:\n#       db:                 null\n#       home:               null\n#       ### TAINT use more permissive identifier syntax ###\n#       _loc_marker_re:     /<(?<left_slash>\\/?)dm:loc#(?<doc_loc_id>[-_a-zA-Z0-9]*)(?<right_slash>\\/?)>/ug\n#     create: ( x ) ->\n#       return x unless ( not x? ) or ( @isa.object x )\n#       R     = { @registry.doc_document_cfg.default..., x..., }\n#       R.db             ?= new DBay()\n#       return R\n#   #...........................................................................................................\n#   declare.doc_add_source_cfg\n#     fields:\n#       doc_src_id:        'doc_src_id'\n#       doc_src_path:      'doc_src_path'\n#       doc_src_hash:      'optional.doc_src_hash'\n#       # doc_fad_id:         'doc_fad_id'\n#     default:\n#       doc_src_id:        null\n#       doc_src_path:      null\n#       doc_src_hash:      null\n#       # doc_fad_id:         null\n#   #...........................................................................................................\n#   declare.doc_update_source_cfg\n#     fields:\n#       doc_src_id:        'doc_src_id'\n#       doc_src_path:      'doc_src_path'\n#       doc_src_hash:      'doc_src_hash'\n#     default:\n#       doc_src_id:        null\n#       doc_src_path:      null\n#       doc_src_hash:      null\n#   #...........................................................................................................\n#   declare.walk_raw_lines_cfg\n#     isa:        'optional.list.of.nonempty.text'\n#     create:     ( x ) ->\n#       return [] unless x\n#       return x\n#   #...........................................................................................................\n#   declare.walk_xxx_lines_cfg\n#     isa:        'optional.list.of.nonempty.text'\n#     create:     ( x ) ->\n#       return [] unless x\n#       return x\n#   #...........................................................................................................\n#   return document_types\n\nmodule.exports = { misfit, get_base_types, }\n\n\n\n"
  ]
}