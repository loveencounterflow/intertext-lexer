{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,OAAA,EAAA,WAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAJ5B;;;;;;;;;;;EAcA,CAAA,CAAE,KAAF,CAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAA5B;;EACA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,UAAA,GAA4B;;EAC5B,MAAA,GAA4B,MAAA,CAAO,QAAP;;EAC5B,WAAA,GAA4B,IAtB5B;;;;;EA2BA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACjB,QAAA;IAAE,IAAqB,kBAArB;AAAA,aAAO,WAAP;KAAF;;IAEE,UAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,UAA5B,EAHF;;;IAME,OAAO,CAAC,QAAR,CAAoB,eAApB;IACA,OAAO,CAAC,OAAR,CAAoB,eAApB;IACA,OAAO,CAAC,WAAR,CAAoB,eAApB;IACA,OAAO,CAAC,OAAR,CAAoB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,KAAK;IAAd,CAApB;IACA,OAAO,CAAC,QAAR,CAAoB,qBAApB,EAVF;;IAYE,OAAO,CAAC,kBAAR,CACE;MAAA,MAAA,EACE;QAAA,IAAA,EAAgB,UAAhB;QACA,GAAA,EAAgB,SADhB;QAEA,OAAA,EAAgB,aAFhB;QAGA,IAAA,EAAgB;MAHhB,CADF;MAKA,OAAA,EACE;QAAA,IAAA,EAAgB,OAAhB;QACA,GAAA,EAAgB,IADhB;QAEA,OAAA,EAAgB,IAFhB;QAGA,IAAA,EAAgB;MAHhB;IANF,CADF,EAZF;;IAwBE,OAAO,CAAC,mBAAR,CACE;MAAA,MAAA,EACE;QAAA,SAAA,EAAgB,SAAhB;QACA,WAAA,EAAgB,SADhB;QAEA,SAAA,EAAgB,SAFhB;QAGA,YAAA,EAAgB;MAHhB,CADF;MAKA,OAAA,EACE;QAAA,SAAA,EAAgB,IAAhB;QACA,WAAA,EAAgB,KADhB;QAEA,SAAA,EAAgB,IAFhB;QAGA,YAAA,EAAgB;MAHhB;IANF,CADF,EAxBF;;AAoCE,WAAO;EArCQ,EA3BjB;;;EAoEA,MAAM,CAAC,OAAP,GAAiB,CAAE,MAAF,EAAU,WAAV,EAAuB,cAAvB;AApEjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'INTERTEXT-LEXER/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nmisfit                    = Symbol 'misfit'\njump_symbol               = '^'\n# PATH                      = require 'node:path'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  # declare.ilx_pattern     override: true, isa: ( x ) -> x instanceof Document\n  declare.ilx_mode    'nonempty.text'\n  declare.ilx_tid     'nonempty.text'\n  declare.ilx_pattern 'text.or.regex'\n  declare.ilx_pop     ( x ) -> x is jump_symbol\n  declare.ilx_jump    'ilx_mode.or.ilx_pop'\n  #.........................................................................................................\n  declare.ilx_add_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      tid:            'ilx_tid'\n      pattern:        'ilx_pattern'\n      jump:           'optional.ilx_jump'\n    default:\n      mode:           'plain'\n      tid:            null\n      pattern:        null\n      jump:           null\n  #.........................................................................................................\n  declare.ilx_constructor_cfg\n    fields:\n      autostart:      'boolean'\n      start_token:    'boolean'\n      end_token:      'boolean'\n      error_tokens:   'boolean'\n    default:\n      autostart:      true\n      start_token:    false\n      end_token:      true\n      error_tokens:   true\n  #.........................................................................................................\n  return base_types\n\n\n#===========================================================================================================\nmodule.exports = { misfit, jump_symbol, get_base_types, }\n\n\n\n"
  ]
}