{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'INTERTEXT-LEXER/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\n{ Dataclass }             = require 'datom'\nbase_types                = null\nmisfit                    = Symbol 'misfit'\n# PATH                      = require 'node:path'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  # declare.ilx_pattern     override: true, isa: ( x ) -> x instanceof Document\n  declare.syntax_target 'list.or.object'\n  ### TAINT legal mode names, lexeme IDs should be confined to JS identifiers ###\n  ### TAINT legal mode names should exclude `lx`, `new` to avoid name clashes ###\n  declare.ilx_mode            'nonempty.text'\n  declare.ilx_lxid            'nonempty.text'\n  declare.ilx_pattern         'text.or.regex'\n  # declare.ilx_pop             ( x ) -> x is jump_symbol\n  ### TAINT should be more specific than 'text' ###\n  declare.ilx_jump            'text.or.function'\n  declare.ilx_reserved        'optional.ilx_reserved_list.or.ilx_reserved_text'\n  declare.ilx_reserved_list   'list.of.nonempty.text'\n  declare.ilx_reserved_text   'nonempty.text'\n  declare.ilx_lexeme_value    'function.or.text'\n  declare.ilx_token_value     'text'\n  declare.ilx_splitmode       ( x ) -> x in [ 'lines', false, ]\n  declare.ilx_statemode       ( x ) -> x in [ 'keep', 'reset', ]\n  declare.ilx_line_number     'positive1.integer'\n  declare.ilx_codeunit_idx    'positive0.integer'\n  #.........................................................................................................\n  declare.ilx_add_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      lxid:           'ilx_lxid'\n      pattern:        'ilx_pattern'\n      jump:           'optional.ilx_jump'\n      reserved:       'optional.ilx_reserved'\n      create:         'optional.function'\n      value:          'optional.ilx_lexeme_value'\n      empty_value:    'optional.ilx_lexeme_value'\n    template:\n      mode:           'plain'\n      lxid:           null\n      pattern:        null\n      jump:           null\n      reserved:       null\n      create:         null\n      value:          null\n      empty_value:    null\n  #.........................................................................................................\n  declare.ilx_interlex_constructor_cfg\n    fields:\n      eof_token:        'boolean'\n      error_tokens:     'boolean'\n      border_tokens:    'boolean'\n      border_value:     'text'\n      multiline:        'boolean'\n      dotall:           'boolean'\n      split:            'ilx_splitmode'\n      state:            'ilx_statemode'\n      trim:             'boolean'\n      prepend:          'text'\n      append:           'text'\n      first:            'anything'\n      last:             'anything'\n      start_of_line:    'anything'\n      end_of_line:      'anything'\n      # global ???\n      # ignorecase  # ignoreCase\n    template:\n      eof_token:        false\n      error_tokens:     true\n      border_tokens:    false\n      border_value:     ''\n      multiline:        false\n      dotall:           false\n      split:            'lines'\n      state:            'keep'\n      trim:             true\n      prepend:          ''\n      append:           ''\n      first:            null\n      last:             null\n      start_of_line:    null\n      end_of_line:      null\n    create: ( x ) ->\n      R = { @registry.ilx_interlex_constructor_cfg.template..., x..., }\n      for key in [ 'first', 'last', 'start_of_line', 'end_of_line', ]\n        continue unless @isa.function ( get = R[ key ] )\n        Object.defineProperty R, key, { get, }\n      return R\n  #.........................................................................................................\n  declare.ilx_walk_source_or_cfg\n    fields:\n      source:           'optional.text'\n      value:            'optional.text'\n      path:             'optional.nonempty.text'\n    template:\n      source:           null\n      value:            null\n      path:             null\n    cast: ( x ) ->\n      return { @registry.ilx_walk_source_or_cfg.template..., source: x, } if @isa.text x\n      return x unless @isa.object x\n      R         = { @registry.ilx_walk_source_or_cfg.template..., x..., }\n      ### TAINT this is a hotfix that allows to use tokens with a `value` property to be used as lexing\n      cfg (which uses `source`); this fix will be removed when we have renamed one or both properties ###\n      R.source  = R.value if R.value?\n      if ( not R.source? and not R.path? )\n        throw new Error \"^types.ilx_walk_source_or_cfg@1^ must set either `source` or `path`\"\n      if ( R.source? and R.path? )\n        throw new Error \"^types.ilx_walk_source_or_cfg@2^ cannot set both `source` and `path`\"\n      R.lnr     ?= ( R.lnr1 ? 1 )\n      R.x       ?= ( R.x1   ? 0 )\n      return R\n  #.........................................................................................................\n  declare.ilx_add_catchall_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      lxid:           'ilx_lxid'\n      concat:         'boolean'\n    template:\n      mode:           null\n      lxid:            '$catchall'\n      concat:         false\n  declare.ilx_add_reserved_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      lxid:           'ilx_lxid'\n      concat:         'boolean'\n    template:\n      mode:           null\n      lxid:            '$reserved'\n      concat:         false\n  #.........................................................................................................\n  declare.ilx_start_stop_preprocessor_cfg\n    fields:\n      active:         'boolean'\n      joiner:         'optional.text'\n      eraser:         'optional.text'\n    template:\n      active:         true\n      joiner:         null\n      eraser:         null\n    create: ( x ) ->\n      # {}, null -> { eraser: ' ', }\n      # { eraser: 'x', } -> { eraser: 'x', }\n      # { joiner: 'x', } -> { joiner: 'x', eraser: null, }\n      # { joiner: 'x', eraser: 'y', } -> error\n      x        ?= { @registry.ilx_start_stop_preprocessor_cfg.template..., }\n      return x unless @isa.object x\n      R         = {}\n      R.active  = x.active ? @registry.ilx_start_stop_preprocessor_cfg.template.active\n      if x.joiner?\n        if x.eraser?\n          throw new Error \"cannot set both `joiner` and `eraser`, got #{rpr x}\"\n        else\n          R.joiner = x.joiner\n        return R\n      R.eraser = x.eraser ? ' '\n      return R\n  #.........................................................................................................\n  # ### TAINT only allows fixed number U+0020 Space, should allow tabs ###\n  # declare.ilx_outline_preprocessor_cfg\n  #   fields:\n  #     blank_line_count:   'positive0.integer'\n  #     indent_module:      'positive1.integer'\n  #   template:\n  #     blank_line_count:   2\n  #     ### NOTE number of spaces for one level of indentation ###\n  #     indent_module:      2\n  #.........................................................................................................\n  declare.ilx_set_position_cfg\n    fields:\n      lnr1:           'optional.ilx_line_number'\n      x1:             'optional.ilx_codeunit_idx'\n    template:\n      lnr1:           null\n      x1:             null\n  #.........................................................................................................\n  declare.ilx_token_key ( x ) ->\n    return false unless @isa.text x\n    return ( x.indexOf ':' ) isnt -1\n  #=========================================================================================================\n  class Token extends Dataclass\n    @types: base_types\n    @declaration:\n      fields:\n        $key:   'ilx_token_key'\n        lnr1:   'ilx_line_number'\n        x1:     'ilx_codeunit_idx'\n        lnr2:   'ilx_line_number'\n        x2:     'ilx_codeunit_idx'\n        value:  'ilx_token_value'\n      template:\n        $key:   null\n        lnr1:   1\n        x1:     0\n        lnr2:   null\n        x2:     null\n        value:  ''\n      create: ( x ) ->\n        return x if x? and not @isa.object x\n        R       = { @registry.Token.template..., x..., }\n        R.lnr2 ?= R.lnr1\n        R.x2   ?= R.x1\n        if @isa.text R.$key ### NOTE safeguard against `$key` missing from user-supplied value ###\n          g       = ( R.$key.match /^(?<mode>[^:]+):(?<lxid>.+)$/ ).groups\n          R.mode  = g.mode\n          R.lxid  = g.lxid\n        return R\n    set_mode: ( mode ) ->\n      @__types.create[ @constructor.name ] { @..., $key: \"#{mode}:#{@lxid}\", }\n  ### TAINT use class method on type ###\n  new Token { $key: 'foo:bar', }\n  #.........................................................................................................\n  return base_types\n\n\n\n#===========================================================================================================\nmodule.exports = { misfit, get_base_types, }\n\n\n\n"
  ]
}