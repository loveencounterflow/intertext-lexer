{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'INTERTEXT-LEXER/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nmisfit                    = Symbol 'misfit'\n# PATH                      = require 'node:path'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  # declare.ilx_pattern     override: true, isa: ( x ) -> x instanceof Document\n  declare.syntax_target 'list.or.object'\n  ### TAINT legal mode names, lexeme IDs should be confined to JS identifiers ###\n  ### TAINT legal mode names should exclude `lx`, `new` to avoid name clashes ###\n  declare.ilx_mode            'nonempty.text'\n  declare.ilx_tid             'nonempty.text'\n  declare.ilx_pattern         'text.or.regex'\n  # declare.ilx_pop             ( x ) -> x is jump_symbol\n  ### TAINT should be more specific than 'text' ###\n  declare.ilx_jump            'text.or.function'\n  declare.ilx_reserved        'optional.ilx_reserved_list.or.ilx_reserved_text'\n  declare.ilx_reserved_list   'list.of.nonempty.text'\n  declare.ilx_reserved_text   'nonempty.text'\n  declare.ilx_lexeme_value    'function.or.text'\n  declare.ilx_splitmode       ( x ) -> x in [ 'lines', false, ]\n  declare.ilx_statemode       ( x ) -> x in [ 'keep', 'reset', ]\n  declare.ilx_line_number     'positive1.integer'\n  declare.ilx_codeunit_idx    'positive0.integer'\n  #.........................................................................................................\n  declare.ilx_add_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      tid:            'ilx_tid'\n      pattern:        'ilx_pattern'\n      jump:           'optional.ilx_jump'\n      reserved:       'optional.ilx_reserved'\n      create:         'optional.function'\n      value:          'optional.ilx_lexeme_value'\n      empty_value:    'optional.ilx_lexeme_value'\n    default:\n      mode:           'plain'\n      tid:            null\n      pattern:        null\n      jump:           null\n      reserved:       null\n      create:         null\n      value:          null\n      empty_value:    null\n  #.........................................................................................................\n  declare.ilx_interlex_constructor_cfg\n    fields:\n      start_token:      'boolean'\n      end_token:        'boolean'\n      error_tokens:     'boolean'\n      border_tokens:    'boolean'\n      border_value:     'text'\n      multiline:        'boolean'\n      dotall:           'boolean'\n      split:            'ilx_splitmode'\n      state:            'ilx_statemode'\n      trim:             'boolean'\n      # global ???\n      # ignorecase  # ignoreCase\n    default:\n      start_token:      false\n      end_token:        false\n      error_tokens:     true\n      border_tokens:    false\n      border_value:     ''\n      multiline:        false\n      dotall:           false\n      split:            'lines'\n      state:            'keep'\n      trim:             true\n  #.........................................................................................................\n  declare.ilx_walk_source_or_cfg\n    fields:\n      source:           'optional.text'\n      value:            'optional.text'\n      path:             'optional.nonempty.text'\n      _error:           'null'\n    default:\n      source:           null\n      value:            null\n      path:             null\n      _error:           null\n    cast: ( x ) ->\n      return { @registry.ilx_walk_source_or_cfg.default..., source: x, } if @isa.text x\n      return x unless @isa.object x\n      R         = { @registry.ilx_walk_source_or_cfg.default..., x..., }\n      R.source  = R.value if R.value?\n      if ( not x.source? and not x.path? )\n        R._error = \"must set either `source` or `path`\"\n      if ( x.source? and x.path? )\n        R._error = \"cannot set both `source` and `path`\"\n      R.lnr     ?= ( R.lnr1 ? 1 )\n      R.x       ?= ( R.x1   ? 0 )\n      return R\n  #.........................................................................................................\n  declare.ilx_add_catchall_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      tid:            'ilx_tid'\n      concat:         'boolean'\n    default:\n      mode:           null\n      tid:            '$catchall'\n      concat:         false\n  declare.ilx_add_reserved_lexeme_cfg\n    fields:\n      mode:           'ilx_mode'\n      tid:            'ilx_tid'\n      concat:         'boolean'\n    default:\n      mode:           null\n      tid:            '$reserved'\n      concat:         false\n  #.........................................................................................................\n  declare.ilx_start_stop_preprocessor_cfg\n    fields:\n      active:         'boolean'\n    default:\n      active:         true\n  #.........................................................................................................\n  declare.ilx_set_offset_cfg\n    fields:\n      lnr:            'ilx_line_number'\n      x:              'ilx_codeunit_idx'\n    default:\n      lnr:            1\n      x:              0\n  return base_types\n\n\n#===========================================================================================================\nmodule.exports = { misfit, get_base_types, }\n\n\n\n"
  ]
}