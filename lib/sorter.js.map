{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sorter.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,iBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,cAAF,CAAA,GAA4B,OAAA,CAAQ,SAAR,CAA5B,EAlBA;;;EAsBM,SAAN,MAAA,OAAA,CAAA;;IAGE,WAAa,CAAA,CAAA,EAAA;;UAYb,CAAA,UAAA,CAAA;MAXE,IAAC,CAAA,KAAD,GAAgB,cAAA,CAAA;AAChB,aAAO;IAFI,CADf;;;IAME,IAAM,CAAA,GAAE,MAAF,CAAA;AACR,UAAA;MAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,IAAhB,CAAqB,MAArB;MACA,CAAA,GAAI,MAAM,CAAC,IAAP,CAAY,KAAZ;MACJ,CAAC,CAAC,IAAF,CAAO,IAAC,CAAA,GAAR;AACA,aAAO;IAJH;;IAON,GAAK,CAAE,CAAF,EAAK,CAAL,CAAA;MACH,IAAiG,cAAjG;QAAA,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,iBAA/B,EAAkD,CAAA,uBAAA,CAAA,CAA0B,GAAA,CAAI,CAAJ,CAA1B,CAAA,CAAlD,EAAN;;MACA,IAAiG,cAAjG;QAAA,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,iBAA/B,EAAkD,CAAA,uBAAA,CAAA,CAA0B,GAAA,CAAI,CAAJ,CAA1B,CAAA,CAAlD,EAAN;;MACA,IAAa,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAA+F,YAA/F;QAAA,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,iBAA/B,EAAkD,CAAA,qBAAA,CAAA,CAAwB,GAAA,CAAI,CAAJ,CAAxB,CAAA,CAAlD,EAAN;;MACA,IAA+F,YAA/F;QAAA,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,iBAA/B,EAAkD,CAAA,qBAAA,CAAA,CAAwB,GAAA,CAAI,CAAJ,CAAxB,CAAA,CAAlD,EAAN;;MACA,IAAa,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,EAAtB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,EAAtB;AAAA,eAAO,CAAC,EAAR;;AACA,aAAQ;IATL,CAbP;;;IAyBE,WAAa,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,CAAE,IAAC,CAAA,GAAD,CAAK,CAAL,EAAQ,CAAR,CAAF,CAAA,KAAiB,CAAC;IAA9B;;EA3Bf,EAtBA;;;EAsDA,MAAM,CAAC,OAAP,GAAiB;IAAE,MAAA,EAAU,IAAI,MAAJ,CAAA;EAAZ;AAtDjB",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ get_base_types }        = require './types'\n\n\n#===========================================================================================================\nclass Sorter\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @types        = get_base_types()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  sort: ( tokens... ) ->\n    @types.validate.list tokens\n    R = tokens.flat Infinity\n    R.sort @cmp\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  cmp: ( a, b ) =>\n    throw new E.Interlex_TBDUNCLASSIFIED '^Sorter.sort@1^', \"missing required lnr1: #{rpr a}\" unless a.lnr1?\n    throw new E.Interlex_TBDUNCLASSIFIED '^Sorter.sort@1^', \"missing required lnr1: #{rpr b}\" unless b.lnr1?\n    return +1 if a.lnr1 > b.lnr1\n    return -1 if a.lnr1 < b.lnr1\n    throw new E.Interlex_TBDUNCLASSIFIED '^Sorter.sort@1^', \"missing required x1: #{rpr a}\" unless a.x1?\n    throw new E.Interlex_TBDUNCLASSIFIED '^Sorter.sort@1^', \"missing required x1: #{rpr b}\" unless b.x1?\n    return +1 if a.x1 > b.x1\n    return -1 if a.x1 < b.x1\n    return  0\n\n  #---------------------------------------------------------------------------------------------------------\n  ordering_is: ( a, b ) -> ( @cmp a, b ) is -1\n\n\n\n#===========================================================================================================\nmodule.exports = { sorter: ( new Sorter() ), }\n"
  ]
}