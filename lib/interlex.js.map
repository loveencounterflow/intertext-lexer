{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/interlex.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ equals\n  copy_regex }            = GUY.samesame\n{ misfit\n  jump_symbol\n  get_base_types }        = require './types'\nE                         = require './errors'\n#...........................................................................................................\n_CRX  = require 'compose-regexp-commonjs'\n_X    =\n  unicode:    ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { unicode: true,   } else flags.add 'u', x\n  sticky:     ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { sticky: true,    } else flags.add 'y', x\n  dotall:     ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { dotAll: true,    } else flags.add 's', x\n  multiline:  ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { multiline: true, } else flags.add 'm', x\n_X.dotAll = _X.dotall\ncompose   = C = { _CRX..., _X..., }\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n{ new_datom\n  lets      }             = DATOM\n{ Ltsort }                = require 'ltsort'\n\n\n#===========================================================================================================\nclass Interlex\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types        = get_base_types()\n    @cfg          = Object.freeze @types.create.ilx_constructor_cfg cfg\n    @start()\n    @base_mode    = null\n    @registry     = {}\n    @_metachr     = '𝔛' # used for identifying group keys\n    @_metachrlen  = @_metachr.length\n    @jump_symbol  = jump_symbol\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  add_lexeme: ( cfg ) ->\n    cfg                       = @types.create.ilx_add_lexeme_cfg cfg\n    @state.finalized          = false\n    @base_mode               ?= cfg.mode\n    ### TAINT use API, types ###\n    entry                     = @registry[ cfg.mode ] ?= { \\\n      lexemes: {}, pattern: null, toposort: false, reserved: new Set(), }\n    entry.toposort          or= cfg.needs? or cfg.precedes?\n    type_of_jump              = @_get_type_of_jump cfg.jump\n    entry.lexemes[ cfg.tid ]  = lexeme = { cfg..., type_of_jump, }\n    lexeme.pattern            = @_rename_groups lexeme.tid, lexeme.pattern if @types.isa.regex lexeme.pattern\n    lexeme.pattern            = C.namedCapture ( @_metachr + cfg.tid ), lexeme.pattern\n    @_add_reserved cfg.mode, cfg.reserved if cfg.reserved?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_type_of_jump: ( jump ) ->\n    return 'nojump'   if not jump?\n    return 'popmode'  if jump is jump_symbol\n    return 'callme'   if @types.isa.function jump\n    return 'pushmode' if @types.isa.nonempty.text jump\n    @types.validate.ilx_jump jump\n    throw new E.Interlex_internal_error '^interlex._get_type_of_jump@1^', \\\n      \"jump (#{@types.type_of jump}) #{rpr jump} should have caused validation error but didn't\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _rename_groups: ( name, re ) ->\n    source = re.source.replace /(?:(?<=\\\\\\\\)|(?<!\\\\))\\(\\?<([^>]+)>/gu, \"(?<#{name}#{@_metachr}$1>\"\n    return new RegExp source, re.flags\n\n  #---------------------------------------------------------------------------------------------------------\n  _toposort_patterns: ( entry ) ->\n    ### TAINT avoid re-running ###\n    return entry unless entry.toposort\n    g   = new Ltsort()\n    tmp = Object.assign {}, entry.lexemes ### NOTE avoiding shorthand for clarity ###\n    for tid, lexeme of entry.lexemes\n      tmp[ tid ]  = lexeme\n      delete entry.lexemes[ tid ]\n      needs       = lexeme.needs  ? []\n      precedes      = lexeme.precedes ? []\n      g.add { name: tid, needs, precedes, }\n    for tid in g.linearize()\n      entry.lexemes[ tid ] = tmp[ tid ]\n    return entry\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_u_flag: ( patterns ) ->\n    for pattern, idx in patterns\n      continue if ( not @types.isa.regex pattern ) or ( pattern.unicode )\n      patterns[ idx ] = compose.unicode pattern\n    return patterns\n\n  #---------------------------------------------------------------------------------------------------------\n  _finalize: ->\n    return unless @state?\n    for mode, entry of @registry\n      entry                     = @_toposort_patterns entry\n      ### TAINT use API ###\n      patterns                  = @_set_u_flag ( lexeme.pattern for tid, lexeme of entry.lexemes )\n      pattern                   = C.either patterns...\n      ### TAINT could / should set all flags in single step ###\n      pattern                   = C.dotall    pattern if @cfg.dotall\n      pattern                   = C.multiline pattern if @cfg.multiline\n      @registry[ mode ].pattern = C.sticky C.unicode pattern\n    for mode, entry of @registry\n      for tid, lexeme of entry.lexemes\n        continue if lexeme.type_of_jump isnt 'pushmode'\n        continue if @registry[ lexeme.jump ]?\n        throw new E.Interlex_TBDUNCLASSIFIED '^interlex._finalize@1^', \"unknown jump target in lexeme #{rpr lexeme}\"\n    @state.finalized = true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  start: ( source = null ) ->\n    @types.validate.optional.text source\n    return @_start source\n\n  #---------------------------------------------------------------------------------------------------------\n  _start: ( source = null ) ->\n    ### TAINT use `@types.create.ilx_state()` ###\n    @_finalize() if @state? and not @state.finalized\n    @state                             ?= {}\n    @state.finalized                   ?= false\n    @state.stack                       ?= []\n    @state.prv_last_idx                 = 0\n    @state.mode                        ?= @base_mode ? null\n    @state.pattern                      = @registry?[ @state.mode ]?.pattern ? null\n    @state.source                       = source\n    @state.finished                     = false\n    @registry[ mode ].pattern.lastIndex = 0 for mode, entry of @registry\n    if @cfg.linewise\n      @state.lnr     ?= @cfg.lnr - 1\n      @state.eol     ?= ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  feed: ( source_or_cfg ) ->\n    return @_feed_source  source_or_cfg if @types.isa.text source_or_cfg\n    return @_feed_cfg     source_or_cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _feed_cfg: ( cfg ) ->\n    @state.eol  = ( cfg.eol ? '' ) if @cfg.linewise\n    return @_feed_source cfg.source\n\n  #---------------------------------------------------------------------------------------------------------\n  _feed_source: ( source ) ->\n    @state.lnr++ if @cfg.linewise\n    @types.validate.text source\n    return @_start source if @cfg.autostart\n    @state.source = source\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  rpr_token: ( token ) ->\n    # @types.validate.ilx_token token\n    t = token\n    j = token.jump\n    R = []\n    R.push t.mk + if j? then ( if j is jump_symbol then j else \">#{j}\") else ''\n    R.push \"(#{t.start}:#{t.stop})\"\n    R.push \"=#{rpr t.value}\"\n    R.push \"#{k}:#{rpr v}\" for k, v of t.x ? {}\n    return \"[#{R.join ','}]\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_token: ( tid, value, length, x = null, lexeme = null ) ->\n    start     = @state.prv_last_idx\n    stop      = start + length\n    jump      = lexeme?.jump ? null\n    { source\n      mode  } = @state\n    #.......................................................................................................\n    ### TAINT use `types.create.ilx_token {}` ###\n    if @cfg.linewise\n      lnr = @state.lnr\n      R   = { mode, tid, mk: \"#{mode}:#{tid}\", jump, value, lnr, start, stop, x, source, }\n    else\n      R   = { mode, tid, mk: \"#{mode}:#{tid}\", jump, value, start, stop, x, source, }\n    #.......................................................................................................\n    if lexeme?.create?\n      R = lexeme.create.call @, R\n    return new_datom \"^#{mode}\", R\n\n  #---------------------------------------------------------------------------------------------------------\n  _token_and_lexeme_from_match: ( match ) ->\n    x = null\n    for key, value of match.groups\n      continue unless value?\n      if key.startsWith @_metachr\n        token_tid           = key[ @_metachrlen .. ]\n        token_value         = value\n      else\n        key                 = ( key.split @_metachr )[ 1 ]\n        ( x ?= {} )[ key ]  = if value is '' then null else value\n    lexeme  = @registry[ @state.mode ].lexemes[ token_tid ]\n    token   = @_new_token token_tid, token_value, match[ 0 ].length, x, lexeme\n    return { token, lexeme, }\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( source_or_cfg ) -> [ ( @walk source_or_cfg )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  walk: ( source_or_cfg ) ->\n    cfg = @types.cast.ilx_walk_source_or_cfg source_or_cfg\n    return @_walk_text        cfg if cfg.source?\n    return @_walk_file_lines  cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_file_lines: ( cfg ) ->\n    ### TAINT should provide `lnr`, `eol` as well ###\n    ### TAINT derive `cfg` for line iterator (`trim`, `chunk_size`) ###\n    for { lnr, line, eol, } from GUY.fs.walk_lines_with_positions cfg.path, { trim: @cfg.trim, }\n      yield from @_walk_text { cfg..., source: line, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_text: ( cfg ) ->\n    return @_walk_text_lines cfg if @cfg.linewise\n    return @_walk_text_whole cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_text_whole: ( cfg ) ->\n    @feed cfg\n    #.......................................................................................................\n    loop\n      break if @state.finished\n      yield Y if ( Y = @step() )?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_text_lines: ( cfg ) ->\n    for { lnr, line, eol, } from GUY.str.walk_lines_with_positions cfg.source, { trim: @cfg.trim, }\n      yield from @_walk_text_whole { cfg..., lnr, source: line, eol, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  step: ->\n    #.......................................................................................................\n    ### Affordance for lexemes matching only end-of-input (pattern `/$/y`): ###\n    if ( @state.prv_last_idx is @state.source.length ) and ( match = @state.source.match @state.pattern )?\n      ### TAINT code duplication ###\n      { token\n        lexeme          } = @_token_and_lexeme_from_match match\n      token               = @_get_next_token lexeme, token, match\n      @state.prv_last_idx = @state.pattern.lastIndex + 1\n      return token\n    #.......................................................................................................\n    if @state.prv_last_idx >= @state.source.length\n      ### reached end ###\n      @state.finished     = true\n      token               = @_new_token '$eof', '', 0 if @cfg.end_token\n      return token\n    #.......................................................................................................\n    match = @state.source.match @state.pattern\n    #.......................................................................................................\n    unless match?\n      ### TAINT might want to advance and try again? ###\n      @state.finished  = true\n      token            = @_new_token '$error', '', 0, { code: 'nomatch', }\n      return token\n    #.......................................................................................................\n    if @state.pattern.lastIndex is @state.prv_last_idx\n      if match?\n        { token } = @_token_and_lexeme_from_match match\n        ### TAINT uses code units, should use codepoints ###\n        center    = token.stop\n        left      = Math.max 0, center - 11\n        right     = Math.min @state.source.length, center + 11\n        before    = @state.source[ left ... center ]\n        after     = @state.source[ center + 1 .. right ]\n        mid       = @state.source[ center ]\n        ### TAINT raise error or return error token ###\n        warn '^31-9^', { before, mid, after, }\n        warn '^31-10^', GUY.trm.reverse \"pattern #{rpr token.tid} matched empty string; stopping\"\n        @state.finished = true\n      else\n        ### TAINT raise error or return error token ###\n        warn '^31-11^', GUY.trm.reverse \"nothing matched; detected loop, stopping\"\n        @state.finished = true\n        return null\n    #.......................................................................................................\n    { token\n      lexeme          } = @_token_and_lexeme_from_match match\n    token               = @_get_next_token lexeme, token, match\n    @state.prv_last_idx = @state.pattern.lastIndex\n    return token\n\n  #---------------------------------------------------------------------------------------------------------\n  _call_jump_handler: ( lexeme, token, match ) ->\n    divert = lexeme.jump { token, match, lexer: @, }\n    return { token, jump: null, type_of_jump: 'nojump', } unless divert?\n    if @types.isa.text divert\n      return { token, jump: jump_symbol,  type_of_jump: 'popmode',  } if divert is jump_symbol\n      return { token, jump: divert,       type_of_jump: 'pushmode', }\n    if @types.isa.function divert\n      throw new E.Interlex_TBDUNCLASSIFIED '^interlex._call_jump_handler@1^', \\\n        \"jump handler of lexeme #{rpr lexeme.mk} returned illegal value #{rpr divert}\"\n    token         = replacement_token if ( replacement_token = divert.token )?\n    jump          = divert.jump ? null\n    type_of_jump  = @_get_type_of_jump jump\n    return { token, jump, type_of_jump, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_next_token: ( lexeme, token, match ) ->\n    switch lexeme.type_of_jump\n      when 'nojump'   then null\n      when 'pushmode' then @_push_mode lexeme.jump\n      when 'popmode'\n        @_pop_mode()\n        token = lets token, ( token ) => token.jump = @state.mode\n      when 'callme'\n        { token\n          jump\n          type_of_jump } = @_call_jump_handler lexeme, token, match\n        # debug '^2343^', ( rpr jump ), token\n        switch type_of_jump\n          when 'nojump'   then null\n          when 'pushmode' then @_push_mode jump\n          when 'popmode'  then @_pop_mode()\n          else\n            throw new E.Interlex_internal_error '^interlex._get_next_token@1^', \\\n              \"unknown type_of_jump #{rpr type_of_jump} in lexeme #{rpr lexeme}\"\n        token = lets token, ( token ) => token.jump = if type_of_jump is 'nojump' then null else @state.mode\n      else\n        throw new E.Interlex_internal_error '^interlex._get_next_token@2^', \\\n          \"unknown type_of_jump in lexeme #{rpr lexeme}\"\n    return token\n\n  #---------------------------------------------------------------------------------------------------------\n  _pop_mode: ->\n    unless @state.stack.length > 0\n      throw new E.Interlex_mode_stack_exhausted '^interlex._pop_mode@2^', \\\n        \"unable to jump back from initial state\"\n    @state.mode               = @state.stack.pop()\n    old_last_idx              = @state.pattern.lastIndex\n    @state.pattern            = @registry[ @state.mode ].pattern\n    @state.pattern.lastIndex  = old_last_idx\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _push_mode: ( jump ) ->\n    @state.stack.push @state.mode\n    @state.mode               = jump\n    old_last_idx              = @state.pattern.lastIndex\n    @state.pattern            = @registry[ @state.mode ].pattern\n    @state.pattern.lastIndex  = old_last_idx\n    return null\n\n\n  #=========================================================================================================\n  # RESERVED ITEMS\n  #---------------------------------------------------------------------------------------------------------\n  _add_reserved: ( mode, reserved ) ->\n    unless ( entry = @registry[ mode ] )?\n      throw new E.Interlex_internal_error '^interlex._add_reserved@1^', \"no such mode: #{rpr mode}\"\n    if @types.isa.list reserved\n      @_add_reserved mode, x for x in reserved\n      return null\n    ### NOTE may accept regexes in the future ###\n    @types.validate.nonempty.text reserved\n    entry.reserved.add reserved\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_catchall_regex: ( mode, entry ) -> compose.charSet.complement @_get_reserved_regex mode, entry\n  _get_reserved_regex: ( mode, entry ) -> compose.either entry.reserved...\n\n  #---------------------------------------------------------------------------------------------------------\n  add_catchall_lexeme: ( cfg ) ->\n    { mode\n      tid } = @types.create.ilx_add_catchall_lexeme_cfg cfg\n    mode   ?= @base_mode\n    unless ( entry = @registry[ mode ] )?\n      throw new E.Interlex_mode_unknown '^interlex.add_catchall_lexeme@1^', mode\n    pattern = @_get_catchall_regex mode, entry\n    pattern = compose.suffix '+', pattern if @cfg.catchall_concat\n    @add_lexeme { mode, tid, pattern, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_reserved_lexeme: ( cfg ) ->\n    { mode\n      tid } = @types.create.ilx_add_reserved_lexeme_cfg cfg\n    mode   ?= @base_mode\n    unless ( entry = @registry[ mode ] )?\n      throw new E.Interlex_mode_unknown '^interlex.add_reserved_lexeme@1^', mode\n    pattern = @_get_reserved_regex mode, entry\n    pattern = compose.suffix '+', pattern if @cfg.reserved_concat\n    @add_lexeme { mode, tid, pattern, }\n    return null\n\n\n#===========================================================================================================\nmodule.exports = { Interlex, compose, }\n\n"
  ]
}