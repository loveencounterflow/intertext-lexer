{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tools/outline-preprocessor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERLEX/OUTLINE-PREPROC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ misfit\n  get_base_types }        = require '../types'\nlets                      = GUY.lft.lets\n{ Transformer\n  transforms\n  $           }           = require 'moonriver'\n\n\n\n#===========================================================================================================\n_new_prelexer = ( cfg ) ->\n  { Interlex }  = require '../main'\n  lexer         = new Interlex { split: 'lines', cfg..., }\n  prv_spc_count = 0\n  #.......................................................................................................\n  do =>\n    mode = 'outline'\n    nl = ( token ) =>\n      token.value           = '\\n'\n      token.data           ?= {}\n      token.data.spc_count  = prv_spc_count\n      return token\n    material = ( token ) =>\n      token.data           ?= {}\n      token.data.indent    ?= ''\n      token.data.material  ?= ''\n      token.data.spc_count  = prv_spc_count = token.data.indent.length\n      return token\n    ### NOTE consider to allow escaping newlines ###\n    # lexer.add_lexeme { mode, tid: 'escchr',         pattern: /\\\\(?<chr>.)/u,                      reserved: '\\\\', }\n    lexer.add_lexeme { mode, tid: 'nl',       create: nl,       pattern: /$/u, }\n    lexer.add_lexeme { mode, tid: 'material', create: material, pattern: /^(?<indent>\\x20*)(?<material>.+)$/, }\n  #.......................................................................................................\n  return lexer\n\n#===========================================================================================================\n@$010_lexing = class $010_lexing extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    GUY.props.hide @, '_lexer', _new_prelexer()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse: => parse = ( source, send ) =>\n    send token for token from @_lexer.walk source\n    return null\n\n#===========================================================================================================\n@$020_consolidate = class $020_consolidate extends $010_lexing\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_newlines: ->\n    { Interlex }  = require '../main'\n    position      = null\n    nl_count      = 0\n    spc_count     = null\n    stop          = Symbol 'stop'\n    template      = { mode: 'plain', tid: 'nls', mk: 'plain:nls', $: '^outliner.020^', }\n    #.......................................................................................................\n    flush = ( send ) =>\n      return null if nl_count is 0\n      value         = '\\n'.repeat nl_count\n      position.lnr2 = position.lnr1 + nl_count\n      if nl_count > 1\n        position.lnr2 = position.lnr1 + nl_count - 1\n        position.x2   = 0\n      data          = { nl_count, spc_count, }\n      nls           = { template..., value, data, position..., }\n      nl_count         = 0\n      position      = null\n      spc_count     = null\n      send nls\n    #.......................................................................................................\n    return $ { stop, }, consolidate_newlines = ( d, send ) =>\n      return flush send if d is stop\n      return send d if d.$stamped\n      if d.mk is 'outline:nl'\n        nl_count++\n        position   ?= Interlex.get_token_position d\n        spc_count  ?= d.data.spc_count\n      else\n        flush send\n        send d\n      return null\n\n#===========================================================================================================\n@$030_structure = class $030_structure extends $020_consolidate\n\n  #---------------------------------------------------------------------------------------------------------\n  start = Symbol 'start'\n  stop  = Symbol 'stop'\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_start_and_stop: => $ { start, stop, }, ( d, send ) => send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $mark_indentation_levels: =>\n    { Interlex }  = require '../main'\n    prv_spc_count = 0\n    template      = { mode: 'outline', tid: 'dentchg', mk: 'outline:dentchg', $: '^outliner.030^', }\n    position      = null\n    return group_indentation_levels = ( d, send ) =>\n      if d is start\n        return send { template..., lnr1: 1, x1: 0, lnr2: 1, x2: 0, data: { from: prv_spc_count, to: 0, }, }\n      if d is stop\n        return send { template..., position..., data: { from: prv_spc_count, to: 0, }, }\n      position = Interlex.get_token_position d\n      if ( spc_count = d.data.spc_count ) isnt prv_spc_count\n        send { template..., position..., data: { from: prv_spc_count, to: spc_count, }, }\n        prv_spc_count = spc_count\n      send d\n      return null\n\n\n\n\n\n"
  ]
}