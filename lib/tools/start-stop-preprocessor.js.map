{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tools/start-stop-preprocessor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERLEX/START-STOP-PREPROC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ misfit\n  get_base_types }        = require '../types'\nlets                      = GUY.lft.lets\n\n\n#===========================================================================================================\nclass @Start_stop_preprocessor\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types        = get_base_types()\n    @cfg          = Object.freeze @types.create.ilx_start_stop_preprocessor_cfg cfg\n    @_lexer       = @_new_prelexer()\n    @_parser      = @_new_preparser()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  walk: ( source_or_cfg ) -> @_parser.send source_or_cfg; yield from @_parser.walk()\n  run:  ( source_or_cfg ) -> [ ( @walk source_or_cfg )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_prelexer: ( cfg ) ->\n    { Interlex }  = require '../main'\n    lexer         = new Interlex { split: 'lines', append: '\\n', cfg..., }\n    #.......................................................................................................\n    do =>\n      mode = 'meta'\n      create = ( token ) ->\n        token.data        ?= {}\n        token.data.scope  ?= 'local'\n        return token\n      lexer.add_lexeme { mode, lxid: 'escchr',         pattern: /\\\\(?<chr>.)/u,                      reserved: '\\\\', }\n      lexer.add_lexeme { mode, lxid: 'start',          pattern: /<\\?start\\?>/,                       reserved: '<', }\n      lexer.add_lexeme { mode, lxid: 'stop',   create, pattern: /<\\?stop(?:[-_](?<scope>all))?\\?>/,  reserved: '<', }\n      lexer.add_lexeme { mode, lxid: 'nl',             pattern: /\\n/u,                               reserved: '\\n', }\n      lexer.add_lexeme { mode, lxid: 'text_lt',        pattern: /<(?=\\?)/, }\n      lexer.add_catchall_lexeme { mode, lxid: 'text', concat: true, }\n    #.......................................................................................................\n    return lexer\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_preparser: ->\n    { Pipeline\n      $         } = require 'moonriver'\n    p             = new Pipeline()\n    #.......................................................................................................\n    join = ( collector, joinerase ) =>\n      { joiner\n        eraser }  = joinerase\n      first_t     = collector.at 0\n      last_t      = collector.at -1\n      return lets first_t, ( d ) =>\n        #...................................................................................................\n        if joiner?\n          d.value = ( ( t.value for t in collector ).join joiner ).trimEnd()\n        else\n          parts     = []\n          last_idx  = collector.length - 1\n          for t, idx in collector\n            parts.push t.value\n            continue if idx >= last_idx\n            parts.push eraser.repeat distance if ( distance = collector[ idx + 1 ].x1 - t.x2 ) > 0\n          d.value = ( parts.join '' ).trimEnd()\n        #...................................................................................................\n        d.lnr1  = first_t.lnr1\n        d.x1    = first_t.x1\n        d.lnr2  = last_t.lnr2\n        d.x2    = last_t.x2\n    #.......................................................................................................\n    $parse = => parse = ( source, send ) =>\n      send token for token from @_lexer.walk source\n    #.......................................................................................................\n    $mark_active = =>\n      active = @cfg.active\n      set_active = ( d, active ) => lets d, ( d ) =>\n        d.data         ?= {}\n        d.data.active   = active\n      return mark_active = ( d, send ) =>\n        if d.$key is 'meta:start'\n          active = true\n          return send set_active d, false\n        if d.$key is 'meta:stop'\n          active = false\n          return send set_active d, false\n        send set_active d, active\n    #.......................................................................................................\n    $collect_chunks = =>\n      collector = []\n      active    = null\n      last      = Symbol 'last'\n      #.....................................................................................................\n      return collect_chunks = $ { last, }, ( d, send ) =>\n        if d is last\n          send join collector, { joiner: '', } if collector.length > 0\n          collector = []\n          return null\n        if d.$key is 'meta:nl'\n          collector.push d\n          send join collector, { joiner: '', }\n          collector = []\n        else if active isnt d.data.active\n          send join collector, { joiner: '', } if collector.length > 0\n          collector = [ d, ]\n        else\n          collector.push d\n        active = d.data.active\n    #.......................................................................................................\n    $assemble_lines = =>\n      collector = []\n      last      = Symbol 'last'\n      prv_lnr1  = null\n      join_cfg  = {}\n      join_cfg.joiner = @cfg.joiner if @cfg.joiner?\n      join_cfg.eraser = @cfg.eraser if @cfg.eraser?\n      #.....................................................................................................\n      return assemble_lines = $ { last, }, ( d, send ) =>\n        if d is last\n          send join collector, join_cfg if collector.length > 0\n          collector = []\n          return null\n        return send d unless d.data.active\n        prv_lnr1 ?= d.lnr1\n        if d.lnr1 isnt prv_lnr1\n          prv_lnr1 = d.lnr1\n          send join collector, join_cfg if collector.length > 0\n          collector = []\n          collector.push d\n          return null\n        collector.push d\n        return null\n    #.......................................................................................................\n    p.push $parse()\n    p.push $mark_active()\n    p.push $collect_chunks()\n    p.push $assemble_lines()\n    return p\n"
  ]
}