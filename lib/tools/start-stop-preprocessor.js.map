{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tools/start-stop-preprocessor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERLEX/START-STOP-PREPROC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ misfit\n  get_base_types }        = require '../types'\n\n\n#===========================================================================================================\nclass @Start_stop_preprocessor\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types        = get_base_types()\n    @cfg          = Object.freeze @types.create.ilx_start_stop_preprocessor_cfg cfg\n    @_lexer       = @_new_prelexer()\n    @_parser      = @_new_preparser()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  walk: ( source_or_cfg ) -> @_parser.send source_or_cfg; yield from @_parser.walk()\n  run:  ( source_or_cfg ) -> [ ( @walk source_or_cfg )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_prelexer: ( cfg ) ->\n    { Interlex }  = require '../main'\n    lexer         = new Interlex { split: 'lines', append: '\\n', cfg..., }\n    #.......................................................................................................\n    do =>\n      mode = 'meta'\n      create = ( token ) ->\n        token.data        ?= {}\n        token.data.scope  ?= 'local'\n        return token\n      # nl_value = ( P... ) ->\n      #   debug '^nl_value^', P\n      #   return ''\n      lexer.add_lexeme { mode, tid: 'start',          pattern: /(?<!\\\\)<\\?start\\?>/,                      reserved: '<', }\n      lexer.add_lexeme { mode, tid: 'stop',   create, pattern: /(?<!\\\\)<\\?stop(?:[-_](?<scope>all))?\\?>/, reserved: '<', }\n      # lexer.add_lexeme { mode, tid: 'nl',             pattern: /$/u, value:  nl_value, }\n      lexer.add_lexeme { mode, tid: 'text_lt',        pattern: /<(?=\\?)/, }\n      lexer.add_catchall_lexeme { mode, tid: 'text', concat: true, }\n    #.......................................................................................................\n    return lexer\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_preparser: ->\n    { Pipeline }  = require 'moonriver'\n    p             = new Pipeline()\n    #.......................................................................................................\n    $parse = => parse = ( source, send ) =>\n      send token for token from @_lexer.walk source\n    #.......................................................................................................\n    $mark_active = =>\n      active = @cfg.active\n      set_active = ( d, active ) -> GUY.lft.lets d, ( d ) ->\n        d.data         ?= {}\n        d.data.active   = active\n      return mark_active = ( d, send ) ->\n        if d.mk is 'meta:start'\n          active = true\n          return send set_active d, false\n        if d.mk is 'meta:stop'\n          active = false\n          return send set_active d, false\n        send set_active d, active\n    #.......................................................................................................\n    $collect_chunks = ->\n      collector = []\n      active    = null\n      #.....................................................................................................\n      join      = ->\n        first_t = collector.at 0\n        last_t  = collector.at -1\n        return GUY.lft.lets first_t, ( d ) ->\n          d.value = ( t.value for t in collector ).join ''\n          d.lnr1  = first_t.lnr1\n          d.x1    = first_t.x1\n          d.lnr2  = last_t.lnr2\n          d.x2    = last_t.x2\n      #.....................................................................................................\n      return collect_chunks = ( d, send ) ->\n        # active ?= d.data.active\n        if d.mk is 'meta:nl'\n          collector.push d\n          send join()\n          collector = []\n        else if active isnt d.data.active\n          send join() if collector.length > 0\n          collector = [ d, ]\n        else\n          collector.push d\n        active = d.data.active\n    #.......................................................................................................\n    p.push $parse()\n    p.push $mark_active()\n    p.push $collect_chunks()\n    return p\n"
  ]
}